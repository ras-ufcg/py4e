Execução Condicional
=====================

Expressões Boleanas
-------------------

\index{expressões booleanas}
\index{operador lógico}
\index{expressão! booleano}
\index{operador! lógico}

Uma *expressão booleana* é uma expressão que pode ser ou verdadeira ou falsa.
Os exemplos a seguir utilizam o operador `==`,
que ao comparar dois operandos produz um resultado positivo `True`,
se forem iguais, e um resultado negativo `False`, caso contrário.

~~~~ {.python .trinket}
>>> 5 == 5
True
>>> 5 == 6
False
{}
~~~~

`True` e `False` são valores especiais que pertecem à classe `bool`;
estes elementos não são interpretados como strings;

\index{True special value}
\index{False special value}
\index{special value!True}
\index{special value!False}
\index{bool type}
\index{type!bool}
\index{valor especial True}
\index{valor especial False}
\index{tipo bool}
\index{classe bool}

~~~~ {.python}
>>> type(True)
<class 'bool'>
>>> type(False)
<class 'bool'>
~~~~

O operador `==` é um dos *operadores de comparação*;
outros operadores deste tipo são:

~~~~ {.python}
x != y               # x é diferente de y
x > y                # x é maior do que y
x < y                # x é menor do que y
x >= y               # x é maior ou igual a y
x <= y               # x é menor ou igual a y
x is y               # x é o mesmo que y
x is not y           # x não é o mesmo que y
~~~~

Por mais que estas expressões aparentem ser familiares para você,
os símbolos em python possuem uma diferença dos símbolos
utilizados na matemática para realizar as mesmas operações.
Um erro comum é utilizar-se de apenas um sinal (`=`) ao 
invés de um sinal duplo (`==`) para comparar uma igualdade.
Lembre-se que `=` é um operador de atribuição e `==` é um
operador de comparação. Vale mencionar que não há uma atribuição 
padrão aos operadores `=<` e `=>`.


\index{operator!comparison}
\index{operador de comparação}

Operadores Lógicos
-----------------

\index{operador lógico}
\index{operador!lógico}

Existem três Operadores lógicos: `and`,
`or`, e `not`. A semântica (significado) destes
operadores são similares ao seu significado em Inglês. Por exemplo,

`x > 0 and x < 10`

É verdadeiro só se `x` for maior do que 0 e menor que 10.

\index{operador and}
\index{operador or}
\index{operador not}
\index{operador!and}
\index{operador!or}
\index{operador!not}

`n%2 == 0 or n%3 == 0` é verdadeiro se alguma das condições
é verdadeira, isto é, se o número é divisível por 2 ou 3.

Finalmente, o operador `not` nega uma expressão booleana, então
`not (x > y)` é verdadeiro se `x > y` é falso; isto 
é, se `x` for menor ou igual a `y`.

Rigorosamente falando, os operandos dos operadores lógicos devem ser
expressões booleanas, mas o Python não é muito rigoroso. Qualquer número diferente de zero
é interpretado como "verdadeiro".

~~~~ {.python}
>>> 17 and True
True
~~~~

Essa flexibilidade pode ser útil, mas existem algumas sutilezas que
podem ser confusas. você pode querer evitá-lo até você ter
certeza de que sabe o que está fazendo.

Execução condicional
---------------------
\index{declaração condicional}
\index{declaração! condicional}
\index{declaração if}
\index{declaração!if}
\index{Execuções condicionais}

A fim de  escrever programas úteis nós sempre necessitamos da abilidade de checar condições e mudar o comportamento do programa de acordo. *Declarações Condicionais* nos dão esta habilidade. A forma mais simples é a declaração `if`:

~~~~ {.python}
if x > 0 :
    print('x é positivo')
~~~~

A expressão boleana depois da declaração `if` é chamada de *condição*. Nós terminamos esta declaração com símbolo de dois pontos (:) e as linhas depois da declaração `if`são indentadas.

![If Logic](height=1.5in@../images/if)

Se a condição lógica é verdade, então a declaração que está indentada é executada. Se a condição lógica for falsa, a condição indentada é ignorada.

\index{condição}
\index{declaração composta}
\index{declaração! composta}

Declarações `if` tem a mesma com as definições de funções ou laços `for` ^[Nós aprenderemos sobre funções no Capítulo 4 e laços no Capítulo 5.]. A declaração consiste com uma linha de cabeçalho com um símbolo de dois pontos (:) seguido de um bloco indentado. Declarações como estas são chamadas de *declarações compostas*, pois elas se alongam por mais de uma linha.

Não existe limite para o número de declarações que pode-se aparecer no corpo da mesma, mas é necessária que apareça apenas uma. Ocasionalmente, é útil deixar um o corp sem condições (geralmente como um lembrete para um código que ainda não foi escrito ainda). Neste caso, você pode utilizar a declaração `pass`, que não faz nada.

\index{declaração pass}
\index{declaração!pass}

~~~~ {.python}
if x < 0 :
    pass          # necessita-se trabalhar com valores negativos!
~~~~

Se você digitar uma declaração `if` no interpretador Python, o prompt mudará de três chevrons para três pontos de modo a indicar
que você está no meio de um bloco de declaração como é mostrado abaixo:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Pequeno')
...
Pequeno
>>>
~~~~

Ao utilizar o interpretador Python, você deverá deixar uma linha em branco no final do bloco, ao contrário o Python retornará um erro:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Pequeno')
... print('Feito')
  File "<stdin>", line 3
    print('Feito')
        ^
SyntaxError: invalid syntax
~~~~

Uma linha em branco no final do bloco de declaração não é necessário quando se está escrevendo e executando o script, mas pode ser necessário para melhorar o entendimento do seu código.

Execução Alternativa
---------------------

\index{execução alternativa}
\index{else keyword}
\index{keyword!else}

Uma segunda forma da declaração `if` é a *execução alternativa*,
na qual existem duas possibilidades e a condição determina
qual delas deve ser executada. A sintaxe se dá da seguinte forma:

~~~~ {.python}
if x%2 == 0 :
    print('x é par')
else :
    print('x é ímpar')
~~~~

Se ao dividirmos `x` por 2 e observarmos que o resto desta divisão for 0,
à vista disto podemos concluir que `x` é par. Então, o programa irá 
exibir uma mensagem para tal efeito. Entretanto, se a condição for
falsa, o segundo conjunto de intruções será executado 
exibindo que x é ímpar.

![If-Then-Else Logic](height=1.5in@../images/if-else)

Como a condição deve ser verdadeira ou falsa, exatamente uma das 
alternativas será executada. As alternativas são chamadas de 
*ramificações*, porque são ramificações no fluxo de execução.

\index{ramificação} 
\index{ramificações} 

Condições Encadeadas
--------------------

\index{condições encadeada}
\index{condições!encadeada}


Ás vezes há mais de duas possibilidades e precisamos de mais de dois caminhos. 
Uma maneira de expressar uma lógica computacional é através de uma *condição encadeada*:


~~~~ {.python}
if x < y:
    print('x é menor que y')
elif x > y:
    print('x é maior que y')
else:
    print('x e y são iguais')
~~~~

`elif` é uma abreviação de "else if". Novamente, apenas um caminho será executado.

![If-Then-ElseIf Logic](height=2.0in@../images/elif)

Não há limite para o número de instruções `elif`. Se houver uma cláusula `else`, tem que ser no final, mas não há a necessidade
de que se a tenha.

\index{elif palavra-chave}
\index{palavra-chave!elif}

~~~~ {.python}
if choice == 'a':
    print('Mau Palpite')
elif choice == 'b':
    print('Bom Palpite')
elif choice == 'c':
    print('Perto, mas não está correto')
~~~~

Cada condição é verificada em ordem. Se a primeira for falsa, a próxima é verificada e assim por diante. Se uma delas for verdadeira, a ramificação correspondente será executada e a instrução terminará. Mesmo que mais de uma condição seja verdadeira, somente a primeira ramificação verdadeira é executada.


Condicionais aninhadas
-------------------

\index{nested conditional}
\index{conditional!nested}

Uma condicional pode também ser aninhada com outra. Nós poderiamos ter
escrito o exemplo com três ramos assim:
~~~~ {.python}
if x == y:
    print('x e y são iguais')
else:
    if x < y:
        print('x é menor que y')
    else:
        print('x é maior que y')
~~~~

A condição mais externa contém dois ramos. O primeiro contém uma 
sentença simples. O segundo contém mais um `if`, que possui mais
dois ramos próprio. Esses dois são ambos sentenças simples, embora
eles pudessem ser condicionais também.

![Sentenças de if aninhadas](height=2.0in@../images/nested)

Embora a indentação das sentenças torne a estrutura aparente,
*condicionais aninhadas* se tornam difícies de serem lidas muito rápido.
Em geral, é uma boa ideia evitar elas quando possível.


Operadores lógicos frequentemente indicam um meio de simplificar
sentenças aninhadas. Por exemplo, podemos reescrever o seguinte código
utilizando uma condicional simples:

~~~~ {.python}
if 0 < x:
    if x < 10:
        print('x é um número positivo de 1 dígito.')
~~~~

A  sentença `print` é executada apenas se as duas condicionais forem 
passadas. Assim, podemos obter o mesmo efeito com o operador `and`:

~~~~ {.python}
if 0 < x and x < 10:
    print('x é um número positivo de 1 dígito.')
~~~~

Tratando exceções usando try e except
----------------------------------------

Anteriormente, vimos um trecho de código onde usamos as funções 
'input' e 'int' para ler e analisar um número inteiro inserido 
pelo usuário. Vimos também o quão traiçoeiro fazer isso 
poderia ser:

~~~~ {.python}
>>> prompt = "Qual é a velocidade rasante de uma andorinha sem carga?\n"
>>> velocidade = input(prompt)
Qual é a velocidade rasante de uma andorinha sem carga?
Seja mais específico, uma andorinha africana ou europeia?
>>> int(velocidade)
ValueError: invalid literal for int() with base 10:
	    (conversão literal inválida para int() com base 10)
>>>
~~~~

Quando executamos esse trecho de código no interpretador, 
nós recebemos um novo aviso do Python, pensamos "oops" e 
passamos para nossa próxima declaração.

Entretanto, se você colocar esse código num programa em Python
e esse erro ocorre, seu programa para imediatamente 
com um "Traceback" indicando tal erro. Isso faz com que os 
próximos comandos não sejam executados.

\index{traceback}

Aqui está um simples programa que converte uma temperatura 
em Fahrenheit para Celsius:

\index{fahrenheit}
\index{celsius}
\index{conversão de temperatura}

\VerbatimInput{../code3/fahren.py}

Se executarmos esse código e inserirmos uma entrada inválida, 
simplesmente ele falha com uma mensagem de erro não amigável:

~~~~
python fahren.py
Insira a temperatura em Fahrenheit:72
22.22222222222222
~~~~

~~~~
python fahren.py
Insira a temperatura em Fahrenheit:fred
Traceback (most recent call last):
  File "fahren.py", line 2, in <module>
    fahr = float(ent)
ValueError: could not convert string to float: 'fred'
            (não foi possível converter string para float: 'fred')
~~~~

Existe uma estrutura de execução condicional interna ao Python para 
manipular esses tipos de erros esperados e inesperados chamada 
"try / except". A ideia de 'try' e 'except' é de você saber que 
alguma sequencia de instruções pode ter um problema e você quer 
adicionar alguns comandos a serem executados caso um erro ocorra.
Esses comandos extra (o bloco 'except') são ignorados se não houver erro.

Você pode pensar a ferramenta 'try' e 'except' no Python como sendo 
uma "apólice de seguro" sobre uma sequencia de instruções.

Podemos reescrever nosso conversor de temperatura da seguinte forma:

\VerbatimInput{../code3/fahren2.py}

O Python começa executando a sequencia de instruções que estão 
no bloco 'try'. Se tudo ocorrer bem, pula-se o bloco 'except' 
e o programa continua. Se uma exceção ocorrer no bloco 'try',
o Python sai desse bloco e executa os comandos no bloco 'except'.

~~~~
python fahren2.py
Insira a temperatura em Fahrenheit:72
22.22222222222222
~~~~

~~~~
python fahren2.py
Insira a temperatura em Fahrenheit:fred
Por favor, insira um número
~~~~

O ato tratar uma exceção com um comando 'try' é chamado de 
*capturar* uma exceção. Nesse exemplo, a condição 'except' 
mostra uma mensagem de erro. Geralmente, capturar uma exceção 
te dá a chance de resolver um problema, ou de tentar novamente,
ou de, pelo menos, encerrar seu programa graciosamente.

Short-circuit evaluation of logical expressions
-----------------------------------------------

\index{short circuit}

When Python is processing a logical expression such as `x >= 2 and
(x/y) > 2`, it evaluates the expression from left to right.
Because of the definition of `and`, if `x` is less
than 2, the expression `x >= 2` is `False` and so
the whole expression is `False` regardless of whether
`(x/y) > 2` evaluates to `True` or
`False`.

When Python detects that there is nothing to be gained by evaluating the
rest of a logical expression, it stops its evaluation and does not do
the computations in the rest of the logical expression. When the
evaluation of a logical expression stops because the overall value is
already known, it is called *short-circuiting* the
evaluation.

\index{guardian pattern}
\index{pattern!guardian}

While this may seem like a fine point, the short-circuit behavior leads
to a clever technique called the *guardian pattern*.
Consider the following code sequence in the Python interpreter:

Análise do curto-circuito de expressões lógicas
-----------------------------------------------

\index{curto-circuito}

Quando Python está processando uma expressão lógica como `x >= 2 and
(x/y) > 2`, a expressão é analisada da esquerda para a direita.
Devido a definição de  `and`, se `x` é menor
que 2, a expressão `x >= 2` é `False` e então
toda a expressão também é `False` independentemente se
`(x/y) > 2` é considerada como `True` ou
`False`.

Quando Python detecta que não há nada a ser ganho examinando o
resto da expressão lógica, a análise é parada e não são
feitos os cálculos no resto da expressão lógica. Quando a
interpretação de uma expressão lógica é interrompida porque o valor geral
já é conhecido, isso é chamado de *curto-circuito* na
análise.

\index{padrão guardião}
\index{padrão!guardião}

Embora isso possa parecer um detalhe, o comportamento de um curto circuito leva
a uma técnica chamada de *padrão guardião*.
Considere o seguinte trecho de código no compilador de Python:

~~~~ {.python}
>>> x = 6
>>> y = 2
>>> x >= 2 and (x/y) > 2
True
>>> x = 1
>>> y = 0
>>> x >= 2 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and (x/y) > 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~

O terceiro cálculo falhou, pois Python estava analisando
`(x/y)` e `y` era zero, causando um erro ao
executar. Mas o segundo exemplo *não* falhou, pois a primeira parte
da expressão `x >= 2` foi considerada `False` então
`(x/y)` nunca foi executado devido à
regra do *curto-circuito* e não houve erro.

Podemos construir a expressão lógica estrategicamente para posicionar uma avaliação
de *guarda* logo antes da avaliação que pode causar
o seguinte erro:

~~~~ {.python}
>>> x = 1
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x >= 2 and (x/y) > 2 and y != 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~

Na primeira xpressão lógica, `x >= 2` é
`False` então a análise para no `and`. Na
segunda expressão lógica, `x >= 2` é `True`
mas `y != 0` é `False` então nunca chegamos em
`(x/y)`.

Na terceira expressão lógica, o `y != 0` é *depois* do
cálculo de `(x/y) ` então a expressão falha com um erro.

Na segunda expressão, dizemos que `y != 0` age como uma
*guarda* para garantir que executaremos apenas `(x/y)`
se `y` é diferente de zero.

Debugging
---------

\index{debugging}
\index{traceback}

O "traceback" que o Python exibe quando um erro ocorre contém bastante 
informação, mas isso pode ser um pouco sufocante. As partes mais úteis
são usualmente:

-   Que tipo de erro aconteceu, e

-   Onde ele ocorreu.

Erros de sintaxe são geralmente fáceis de achar, mas existem algumas 
"armadilhas". Erros envolvendo espaços em branco podem ser traiçoeiros
devido a espaços e "tabs" serem invisíveis e estarmos acostumados 
a ignorá-los.

\index{whitespace}

~~~~ {.python}
>>> x = 5
>>>  y = 6
  File "<stdin>", line 1
    y = 6
    ^
IndentationError: unexpected indent
(Erro de indentação: indentação inprevista)
~~~~

Nesse exemplo, o problema está no fato de que a segunda linha está indentada
com um espaço. Entretanto, a mensagem de erro aponta para o 'y',
o que é enganoso. Comumente, mensagens de erro indicam onde o problema foi
descoberto, mas o erro em si pode estar um pouco antes de onde foi apontado,
às vezes na linha anterior do código.

De modo geral, mensagens de erro te mostram onde o problema foi encontrado,
mas que muitas vezes não é onde ele foi causado.

Glossário
--------

Corpo
:   Sequência de instruções dentro de uma instrução composta.
\index{corpo}

Condicional aninhada
:   Uma condicional que aparece em um dos ramos de outra sentença condicional.
\index{condicional aninhada}
\index{condicional!aninhada}

Condicional encadeada
:   Uma condicional com uma série de ramos alternativos.
\index{condicional encadeada}
\index{condicional!encadeada}

Condição
:   A expressão booleana em uma sentença condicional que determina qual ramo
    será executado.
\index{condição}

Curto-circuito
:   Quando Python está no meio da verificação de uma expressão lógica e para a 
    verificação porque sabe o resultado final da expressão, sem a necessidade de verificar
    o restante desta.
\index{curto-circuito}

Expressão booleana
:   Uma expressão cujo valor é `True` ou `False`.
\index{expressão booleana}
\index{expressão!booleana}

Operador de comparação
:   Um operador que compara seus operandos: `==`,
    `!=`, `>`, `<`, `>=`, e `<=`.

Operador lógico
:   Operadores que combinam expressões booleanas:
    `and`, `or`, e `not`.

Padrão Guardião (_guardian pattern_)
:   Quando construímos uma expressão lógica com comparações adicionais para ganhar
    vantagem com o comportamento de short-circuit.
\index{padrão guardião}
\index{padrão!guardião}

Ramo
:   Uma das alternativas de sequência de instruções dentro de uma condicional.
\index{ramo}

Sentença composta
:  Uma sentença que consiste em um cabeçalho e um corpo. O cabeçalho termina com
   dois pontos (:). O corpo é indentado relativo ao cabeçalho.
\index{sentença composta}

Sentença condicional
:   Uma sentença que controla o fluxo de execução dependendo de alguma
    condição.
\index{sentença condicional}
\index{sentença!condicional}

Traceback
:   Uma lista das funções que estão sendo executadas, mostrada quando uma 
    exceção ocorre.
\index{traceback}

Exercícios 
---------

**Exercício 1: Reescreva seu programa de pagamento, para pagar ao funcionário 1.5 vezes o valor da taxa horária de pagamento pelo tempo trabalhado acima de 40 horas**


~~~~
Digite as Horas: 45
Digite a taxa: 10
Pagamento: 475.0
~~~~

**Exercício 2: Reescreva seu programa de pagamento utilizando `try` e `except`, de forma que o programa consiga lidar com entradas não numéricas graciosamente, mostrando uma mensagem e saindo do programa. A seguir é mostrado duas execuções do programa**


~~~~
Digite as Horas: 20
Digite a taxa: nove
Erro, por favor utilize uma entrada numérica 
~~~~

~~~~
Digite as Horas: quarenta
Erro, por favor utilize uma entrada numérica 
~~~~

**Exercício 3: Escreva um programa que peça por uma pontuação entre 0.0 e 1.0.
Se a pontuação for fora do intervalo, mostre uma mensagem de erro. Se a pontuação estiver entre 0.0 e 1.0, mostre a respectiva nota usando a seguinte tabela**

~~~~
Pontuação    Nota
>= 0.9        A
>= 0.8        B
>= 0.7        C
>= 0.6        D
 < 0.6        F
~~~~

~~~~
Digite a Pontuação: 0.95
A
~~~~

~~~~
Digite a Pontuação: perfeito
Pontuação Inválida
~~~~

~~~~
Digite a Pontuação: 10.0
Pontuação Inválida
~~~~

~~~~
Digite a Pontuação: 0.75
C
~~~~

~~~~
Digite a Pontuação: 0.5
F
~~~~
Rode o programa repetidamente como mostrado acima para testar diferentes valores de entrada.
