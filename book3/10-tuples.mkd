
Tuplas
======

As tuplas são imutáveis
--------------------

\index{tuplas}
\index{tipo!tuplas}
\index{sequência}

Uma tupla^[Fato Divertido: A palavra "tupla" vem dos nomes dados as sequências
de números de comprimentos variados: simples, dobro, triplo, quádruplo,
quintuplo, sextuplo, septuplo, etc.] é uma seqüência de valores muito parecido com uma lista.Os valores armazenados
em uma tupla pode ser qualquer tipo, e eles são indexados por números inteiros. Uma diferença importante é que elas são *imutáveis*. Alem disso, também são *comparáveis* e *hashable* para que possamos ordenar listas deles e usá-las como valores-chave em dicionários de Python.  sasa

\index{mutabilidade}
\index{hashable}
\index{Comparável}
\index{imutável}

Sintaticamente, uma tupla é uma lista separada por vírgulas de valores:

~~~~ {.python}
>>> t = 'a', 'b', 'c', 'd', 'e'
~~~~

Embora não seja necessário, é comum incluir tuplas em
parênteses para nos ajudar identificá-las rapidamente quando olhamos para códigos
de Python:

\index{parêntese!tuplas}

~~~~ {.python}
>>> t = ('a', 'b', 'c', 'd', 'e')
~~~~

Para criar uma tupla com um único elemento, você precisa incluir a vírgula final:

\index{singleton}
\index{tuplas!singleton}

~~~~ {.python .trinket}
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>
~~~~

Sem a vírgula o Python trata '('a')' como uma expressão com uma string entre parênteses que é avaliada como uma string:

~~~~ {.python}
>>> t2 = ('a')
>>> type(t2)
<type 'str'>
~~~~

Outra maneira de construir uma tupla é a função interna
'Tuple'. Sem nenhum argumento, ele cria uma tupla vazia:

\index{função de tuplas}
\index{função!tuplas}

~~~~ {.python .trinket}
>>> t = tuple()
>>> print(t)
()
~~~~

Se o argumento for uma seqüência (string, lista ou tupla), o resultado da
chamada para 'tupla' é uma tupla com os elementos da sequencia:


~~~~ {.python .trinket}
>>> t = tuple('lupins')
>>> print(t)
('l', 'u', 'p', 'i', 'n', 's')
~~~~

Porque 'tupla' é o nome de um construtor, você deve evitar usá-lo como um nome de variável.

A maioria dos operadores de lista também funcionam em tuplas. O operador de colchete indexa na elemento:

\index{operador de suporte}
\index{operador! suporte}

~~~~ {.python .trinket}
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print(t[0])
'a'
~~~~

E o operador de fatia seleciona um intervalo de elementos.

\index{operador de secção}
\index{operador!secção}
\index{tupla!secção}
\index{secção!tupla}

~~~~ {.python}
>>> print(t[1:3])
('b', 'c')
~~~~

Mas se você tentar modificar um dos elementos da tupla, você receberá um erro:

\index{Exceção! Tipo Erro}
\index{Tipo Erro}
\index{atribuição de item}
\index{atribuição!item}

~~~~ {.python}
>>> t[0] = 'A'
TypeError: object doesn't support item assignment
~~~~

Não é possível modificar os elementos de uma tupla, mas você pode substituí-los por outros:

~~~~ {.python .trinket}
>>> t = ('A',) + t[1:]
>>> print(t)
('A', 'b', 'c', 'd', 'e')
~~~~

Comparando tuplas
----------------

\index{Comparação!tuplas}
\index{tuplas!Comparação}
\index{tipo de método}
\index{método!tipo}

Os operadores de comparação trabalham com tuplas e outras sequências. Python começa comparando o primeiro elemento de cada sequência. Se eles forem iguais, ele passa para o próximo elemento, e assim por diante, até encontrar elementos que diferem. Elementos subsequentes não são considerados (mesmo se eles sejam realmente grandes).

~~~~ {.python .trinket}
>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True
~~~~

A função 'sort' funciona da mesma forma. Ele ordena principalmente pelo
primeiro elemento, mas no caso de um empate, ele classifica por segundo elemento, e assim por diante.

Este recurso presta-se a um padrão chamado *DSU* para

Decorar
:uma sequência construindo uma lista de tuplas com uma ou mais chaves de classificação
    precedendo os elementos da sequência,

Sort
:a lista de tuplas usando o Python embutido 'sort', e

Undecorate
:extraindo os elementos classificados da sequência.

\index{DSU patrão}
\index{patraõ!DSU}
\index{decorar-tipo-desdecorar padrão}
\index{Padrão!Decorar-Tipo-desdecorar}
\index{Romeu e Julieta}

Por exemplo, suponha que você tem uma lista de palavras e você deseja classificá-las do maior para o menor:

\VerbatimInput{../code3/soft.py} 

O primeiro loop cria uma lista de tuplas, onde cada tupla é uma palavra
precedido pelo seu comprimento.

'Sort' compara inicialmente o primeiro elemento, comprimento, e apenas
considera o segundo elemento para quebrar laços. O argumento de palavra-chave
'Reverse = true' diz 'Sort' para ir em ordem decrescente.

\index{argumento de palavra-chave}
\index{argumento! palavra-chave}
\index{Passagem}

O segundo loop atravessa a lista de tuplas e constrói uma lista de palavras
em ordem decrescente de comprimento. As palavras de quatro caracteres são classificadas em ordem alfabética *reversa*, então "what" aparece antes "soft" na lista a seguir.

A saída do programa é a seguinte:

~~~~
['yonder', 'window', 'breaks', 'light', 'what',
'soft', 'but', 'in']
~~~~

Claro que a linha perde muito do seu impacto poético quando se transforma em uma Lista de Python e classificada em ordem decrescente de comprimento de palavra.

Atribuição de Tuplas
----------------

\index{tupla!atribuição}
\index{atribuição!tupla}
\index{troca de padrão}
\index{padrão!troca}

Um dos recursos sintáticos únicos da linguagem Python é a capacidade de ter uma tupla no lado esquerdo de uma declaração de atribuição. Isso permite atribuir mais de uma variável por vez quando o lado esquerdo é uma sequência.

Neste exemplo, temos uma lista de dois elementos(que é uma sequência) e atribuímos ao primeiro e ao segundo elemento da sequência às variáveis `x` e `y` em uma única instrução.

~~~~ {.python .trinket}
>>> m = [ 'se', 'divirta' ]
>>> x, y = m
>>> x
'se'
>>> y
'divirta'
>>>
~~~~

Não é mágico, Python traduz *grosseiramente* a sintaxe da atribuição de tupla para o ser o que se segue:^[Python não traduz a sintaxe literalmente. Por exemplo, se você tentar fazer isso com um dicionário, ele não funcionará como o esperado.]

~~~~ {.python .trinket}
>>> m = [ 'se', 'divirta' ]
>>> x = m[0]
>>> y = m[1]
>>> x
'se'
>>> y
'divirta'
>>>
~~~~

Estéticamente, quando usamos uma tupla no lado esquerdo da instrução de atribuição, omitimos os parênteses, mas o que se mostra a seguir é igualmente uma sintaxe válida:

~~~~ {.python}
>>> m = [ 'se', 'divirta' ]
>>> (x, y) = m
>>> x
'se'
>>> y
'divirta'
>>>
~~~~

Uma aplicação particularmente astuta da atribuição de tupla, nos permite *permutar* os valores de duas variáveis em uma única instrução:

~~~~ {.python}
>>> a, b = b, a
~~~~

Ambos os lados desta declaração são tuplas, mas o lado esquerdo é uma tupla de variáveis; o lado direito é uma tupla de expressões. Cada valor no lado direito é atribuído à sua respectiva variável no lado esquerdo. Todas as expressões no lado direito são avaliadas antes de qualquer uma das atribuições.

O número de variáveis à esquerda e o número de valores à direita devem impreterivelmente ser os mesmos:

\index{Exceção!ValueError}
\index{ValueError}

~~~~ {.python}
>>> a, b = 1, 2, 3
ValueError: muitos valores para descompactar
~~~~

Habitualmente, o lado direito pode ser qualquer tipo de sequência(string, lista ou tupla). Por exemplo, para dividir um endereço de email em um nome de usuário e um domínio, você pode escrever:

\index{método de separação}
\index{método!separação}
\index{endereço de e-mail}

~~~~ {.python}
>>> email = 'florzinha@hotmail.com'
>>> nomedeusuario, dominiodoemail = email.split('@')
~~~~

O valor de retorno da operação `split` é uma lista com dois elementos; o primeiro elemento é atribuído ao `nomedeusuario` e o segundo ao `dominiodoemail`.

~~~~ {.python}
>>> print(nomedeusuario)
florzinha
>>> print(dominiodoemail)
hotmail.com
~~~~

Dicionários e tuplas
-----------------------

\index{dicionário}
\index{métodos de items}
\index{métodos!itens}
\index{par de valores chaves}

Os dicionários têm um método chamado `items`(atente-se à escrita deste método) que retorna uma lista de tuplas, em que cada tupla é um par de valores-chave:

~~~~ {.python .trinket}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> print(t)
[('b', 1), ('a', 10), ('c', 22)]
~~~~

Como você deve esperar de um dicionário, os itens não estão em uma ordem específica.

No entanto, como a lista de tuplas é uma lista e as tuplas são comparáveis, agora podemos classificar a lista de tuplas. A conversão de um dicionário em uma lista de tuplas é uma maneira de gerar o conteúdo de um dicionário classificado por chave:

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> t
[('b', 1), ('a', 10), ('c', 22)]
>>> t.sort()
>>> t
[('a', 10), ('b', 1), ('c', 22)]
~~~~

A nova lista é classificada em ordem alfabética crescente pelo valor da chave.

Múltipla atribuição com dicionários
------------------------------------

\index{examinar!dicionário}
\index{dicionário!examinar}

Combinando `items`, atribuição de tuplas e `for`, se tem um bom padrão de código para percorrer as chaves e valores de um dicionário em um único loop:

~~~~ {.python}
for chave, valor in list(d.items()):
    print(valor, chave)
~~~~

Esse loop tem duas *variáveis de iteração*, isso porque `items` retorna uma lista de tuplas e `chave, valor` é uma atribuição de tupla que itera sucessivamente em cada um dos pares de valor/chave no dicionário.

Para cada iteração através de um loop, tanto a chave quanto o valor são avançados para o próximo par de valores no dicionário (mantendo a ordem hash).

A saída deste loop é:

~~~~
10 a
22 c
1 b
~~~~

Novamente, é na ordem da chave hash (nenhuma ordem particular).

Se nós combinarmos essas duas técnicas, nós poderemos mostrar o conteúdo do dicionário ordenado pelo *valor* armazenado em cada par de chave/valor.

Para fazer isso, primeiro fazemos uma lista de tuplas onde cada tupla é `(valor, chave)`. O método `items` nos daria uma lista de tuplas `(chave, valor)`, mas desta vez queremos classificar por valor, não por chave. Depois de construir a lista com as tuplas de chave e valor é simples ordenar a lista na ordem inversa e mostrar em tela a nova lista ordenada.

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> l = list()
>>> for chave, valor in d.items() :
...     l.append( (valor, chave) )
...
>>> l
[(10, 'a'), (22, 'c'), (1, 'b')]
>>> l.sort(reverse=True)
>>> l
[(22, 'c'), (10, 'a'), (1, 'b')]
>>>
~~~~

Construindo cuidadosamente a lista de tuplas para ter o valor como o primeiro elemento de cada tupla, podemos ordenar a lista de tuplas e obter nosso conteúdo de dicionário ordenado por valor.

As palavras mais comuns
-----------------------

\index{Romeu e Julieta}

Voltando ao nosso exemplo de sempre do texto de Romeu e Julieta, Ato 2, Cena 2, podemos aumentar nosso programa para usar essa técnica para imprimir as dez palavras mais comuns no texto da seguinte forma:

\VerbatimInput{../code3/count3.py} 
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

A primeira parte do programa, que lê o arquivo e calcula o dicionário responsável por mapear cada palavra para que a contagem no documento permaneça inalterada. Mas, em vez de simplesmente mostrar `counts` e encerrar o programa, construímos uma lista de tuplas `(valor, chave)` e depois classificamos a lista na ordem inversa.

Como o valor é o primeiro, ele será usado para as comparações. Se houver mais de uma tupla com o mesmo valor, ela olhará para o segundo elemento (a chave), portanto, as tuplas onde o valor é o mesmo serão classificadas pela ordem alfabética da chave.

No final, escrevemos um loop `for` que faz uma iteração de atribuição múltipla e mostra em tela as dez palavras mais comuns, percorrendo uma fatia da lista (`lst [: 10]`).

Então a saída finalmente parece com o que queremos para nossa análise de frequência de palavras.

~~~~
61 u
42 and
40 romeo
34 to
34 the
32 thou
32 juliet
30 that
29 my
24 thee
~~~~

O fato dessa complexa análise de dados ser feita com um programa Python de 19 linhas de fácil entendimento é uma das razões pelas quais o Python é uma boa escolha como uma linguagem para explorar informações.


Usando tuplas como chaves em dicionários
------------------------------------

\index{tupla!como uma chave no dicionário }
\index{hashable}

Como as tuplas são *mutáveis* e as listas não, se nós
desejamos criar uma chave *composta* para usar em um dicionário
devemos usar uma tupla como chave.

Nós encontraríamos uma chave composta se quiséssemos criar uma lista telefônica que mapeia nome-sobrenome associando a números de telefone. Assumindo que definimos as variáveis `primeiro`, `ultmo` e `numero`, poderíamos escrever
um dicionário com a declaração de atribuição da seguinte forma:

~~~~ {.python}
diretorio[primeiro, ultimo] = número
~~~~

A expressão entre colchetes é uma tupla. Poderíamos usar a atribuição de tupla em
uma repetição `for` para percorrer este dicionário.

\index{tuple!in brackets}

~~~~ {.python}
for ultimo, primeiro in diretorio:
    mostrar (primeiro, ultimo, diretório [primeiro, ultimo])
~~~~

Este loop percorre as chaves em `directorio`, que são
tuplas. Ele designa os elementos de cada tupla para `primeiro` e
`ultimo`, depois mostra em tela o nome e o telefone correspondente ao número.


Sequências: strings, listas e tuplas - Oh meu Deus!
--------------------------------------------

\index{sequence}

Eu me concentrei nas listas de tuplas, mas quase todos os exemplos deste capítulo também trabalham com listas de listas, tuplas de tuplas e tuplas de listas. Para evitar enumerar as combinações possíveis, às vezes é mais fácil falar sobre sequências de sequências.

Em muitos contextos, os diferentes tipos de sequências (strings, listas e tuplas) 
podem ser usados de forma permutável. Então, como e por que você escolhe um em relação aos outros?

\index{string}
\index{list}
\index{tuple}
\index{mutability}
\index{immutability}

Para começar com o óbvio, as strings são mais limitadas que outras sequências, 
porque os elementos precisam ser caracteres. Eles também são imutáveis. Se você 
precisar alterar os caracteres em uma string (em vez de criar uma nova string), 
você deveria usar uma lista de caracteres.

As listas são mais comuns que as tuplas, principalmente porque são mutáveis. Mas existem 
alguns casos em que você pode preferir tuplas:

1.  Em alguns contextos, como uma instrução de `return`, é sintaticamente mais
simples criar uma tupla do que uma lista. Em outros contextos, você pode preferir 
uma lista.

2.  Caso queira usar uma sequência como uma chave de dicionário, você tem que 
usar um tipo imutável como uma tupla ou uma string.

3.  Mas se estiver passando uma sequência como argumento para uma função, o uso 
de tuplas reduz o potencial de comportamento inesperado devido ao 
aliasing (serrilhamento).

Como as tuplas são imutáveis, elas não fornecem métodos como `sort` e `reverse`, o 
que modifica as listas existentes. No entanto, o Python fornece as funções internas 
`sorted` and `reversed`, que usam qualquer sequência como parâmetro e retornam uma 
nova sequência com os mesmos elementos em uma ordem diferente.

\index{sorted função}
\index{função!sorted}
\index{reversed função}
\index{função!reversed}

Debugging
---------

\index{debugging}
\index{estrutura de dados}
\index{erro de forma}
\index{erro!forma}

Listas, dicionários e tuplas são conhecidos genericamente como *estrutura
de dados*; neste capítulo estamos começando a ver estruturas compostas, como
listas de tuplas, e dicionários que contém tuplas como chaves e listas como valores. 
Tais estruturas são úteis, mas elas são propensas ao que chamamos de *erros de forma*; 
Isto é, erros causados quando a estrutura de dados tem o tipo, tamanho ou composição errada,
Ou talvez você escreva algum código e esqueça da forma dos seus dados e introduza um erro.
Por exemplo, se você está esperando uma lista com um inteiro e eu te dou um bom e velho inteiro
(não em uma lista). Não funciona.

Glossário
--------

atribuição por tuplas
:   Uma atribuição com uma sequência no lado direito e uma tupla de variáveis do lado esquerdo. O lado direito é avaliado e então seus elementos são atribuídos às variáveis do lado esquerdo.
\index{atribuição por tuplas}
\index{tuplas!atribuição}

comparável
:   Um tipo no qual um valor por ser verificado para ver se é maior, menor, ou igual a outro valor desse mesmo tipo. Quando são comparáveis, podem ser colocados em listas e também serem ordenados.
\index{comparável}

DSU
:   Aberviação de _"decorate-sort-undecorate"_ (decorar-ordenar-esquecer), um padrão que envolve construir uma lista de tuplas, ordenar e então etrair parte do resultado.
\index{padrão DSU}

espalhar
:   A operação de tratar uma sequência como uma lista de argumentos. \index{espalhar}

estrutura de dados
:   Uma coleção de valores relacionados, frequentemente organizados em listas, dicionários, tuplas, etc.
\index{estrutura de dados}

forma (de uma estrutura de dados)
:   O conjunto de tipo, tamanho e composição de uma estrutura de dados. \index{forma}

hashable
:   Um tipo que tem uma funçao hash. Tipos imutáveis como inteiros, _floats_ e _strings_ são hashable, enquanto mutáveis como listas e dicionários não são. 
\index{hashable}

reunir
:   A operação de montar uma tupla de argumentos de tamanho variável.
\index{reunir}

singleton
:   Uma lista (ou outr sequência) com um único elemento. \index{singleton}

tupla
:   Uma sequência imutável de elementos.
 \index{tupla}

Exercícios
---------

**Exercício 1: Revise um programa anterior como é pedido: Leia e analise as linhas com _"From"_ e retire os endereços dessas linhas. Conte o número de mensagens de cada pessoa usando um dicionário.**
**Depois de todos os dados serem lidos, mostre a pessoa com mais envios criando uma lista de tuplas (contagem, email) do dicionário. Então, ordene a lista em ordem reversa e mostre a pessoa na primeira posição.**

~~~~
Linha simples:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Digite o nome do arquivo: mbox-short.txt
cwen@iupui.edu 5

Digite o nome do arquivo: mbox.txt
zqian@umich.edu 195
~~~~

**Exercício 2: Esse programa conta a distribuição de horas no dia para cada uma das mensagens. Você pode retirar a hora da linha com _"From"_ achando a string de horário e então separando ela em partes usando o caractere ":" (dois pontos). Uma vez acumuladas as contagens para cada hora, mostre os valores, um por linha, ordenados por hora como segue abaixo:**

~~~~
python timeofday.py
Digite o nome do arquivo: mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1
~~~~

**Exercício 3: Escreva um programa que leia um arquivo e mostre as *letras* em ordem decrescente de frequência. Seu programa deve converter todas as entradas para Caixa baixa e apenas contar as letras de a à z. Não conte espaços, dígitos, pontuações, ou qualquer coisa que não seja uma letra do alfabeto. Encontre textos simples de diversas línguas diferentes e veja como a frequência de letras varia entre os idiomas. Compare seis resultados com as tabelas em <https://wikipedia.org/wiki/Letter_frequencies>.**
\index{frequência de letras}
\index{letras!frequência}

